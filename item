-- API for easy handling of items
os.loadAPI("navigation")
os.loadAPI("database")

-- Attempt to dump all the turtle's items into the inventory in front
function dump()
	local selectedSlot = turtle.getSelectedSlot()
	local success = true
	for i=1,16,1 do
		turtle.select(i)
		-- If one of the drops doesn't work, success is false.
		if not turtle.drop() then
			success = false
		end
	end
	turtle.select(selectedSlot)
	return success
end

-- Get the ID string and damage values from the items in the inventory in front of the turtle (requires a homogeneous inventory)
function getInventoryItemInfo()

	--if (turtle.getItemCount(16) != 0) then
		--print("Slot 16 must be empty to get inventory item info!")
		--return
	--end
	
	-- Grab item and analyze it
	local selectedSlot = turtle.getSelectedSlot()
	turtle.select(16)
	
	if not turtle.suck(1) then
		print("Unable to obtain item from inventory")
		return {['name']="none", ['damage']=0}
	end
	local data = turtle.getItemDetail()
	turtle.drop(1)
	
	turtle.select(selectedSlot)
	
	-- Only return ID and damage. Count is irrelevant.
	return {['name']=data.name, ['damage']=data.damage}
end

-- Deposit all items of type into the chest. itemInfo: {['name'],['damage']} Returns success
function depositAllOfType(itemInfo)
	local selectedSlot = turtle.getSelectedSlot()
	local success = false
	for i=1,16,1 do
		turtle.select(i)
		-- If the first paramater is false, Lua will never call turtle.drop()
		if turtle.getItemCount() > 0 and (turtle.getItemDetail().name == itemInfo.name and turtle.getItemDetail().damage == itemInfo.damage) and turtle.drop() then
			success = true
		end
	end
	turtle.select(selectedSlot)
	return success
end

-- Does this turtle currently have any items
function hasItems()
	for i=1,16,1 do
		if turtle.getItemCount(i) > 0 then
			return true
		end
	end
	return false
end

-- Returns the lowest slot that doesn't have items in it.
function getLowestOpenSlot()
	for i=1,16,1 do
		if turtle.getItemCount(i) == 0 then
			return i
		end
	end
	return "full"
end

-- Are two items the same?
function equals(item1, item2)
	return (not (item1 == nil or item2 == nil)) and item1.name == item2.name and item1.damage == item2.damage
end

-- Select an item in the inventory
function selectItem(itemInfo)
	if equals(turtle.getItemDetail(), itemInfo) then
		return true
	end
	
	for i=1,16,1 do
		turtle.select(i)
		if equals(turtle.getItemDetail(), itemInfo) then
			return true
		end
	end 
	
	return false
end

-- Returns how many of an item type turtle has
function tally(itemInfo)
	local items = 0
	
	for i=1,16,1 do
		if item.equals(turtle.getItemDetail(i), itemInfo) then
			items = items + turtle.getItemCount(i)
		end
	end
	
	return items
end