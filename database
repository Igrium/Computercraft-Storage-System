-- API for dealing with accessing things from the master database
-- Database file structure must be root/databaseFiles/chests
-- Access the database directly with the "database" rednet protocol, and wait for a redmet message with the "dataRecieve" protocol.

-- How long to wait for a response from the database
timeoutseconds = 5

os.loadAPI("config")
os.loadAPI("chest")
os.loadAPI("network")
-- Load the database if required
if config.databaseID == os.getComputerID() then
	os.loadAPI("databaseFiles/chests")
end	


-- Is this computer the database?
function isDatabase()
	return config.databaseID == os.getComputerID()
end

-- Gets the corridors on the X axis the turtle can move along
function getXCorridors()
	return {1243,1237,1231}
end

-- Gets the corridors on the Z axis the turtle can move along
function getZCorridors()
	return {-446,-440,-435}
end

-- Returns the coordinates for the bounds of the room
function getRoomExtents()
	return {['x1']=-446, ['x2']=-435, ['y1']=56, ['y2']=100, ['z1']=1231, ['z2']=1243}
end

-- Returns a list of all the chests
function getStorageArrangement()
	if isDatabase() then
		return chests.chests
	else
		rednet.send(config.databaseID, "chests", "database")
		return select(2, rednet.receive("dataRecieve", timeoutseconds))
	end
end

-- Returns a list of all the chests with an specific item type
function getItemLocations(item)
	locations = {}
	totalLocations = getStorageArrangement()
	
	-- If item description matches, add chest to locations table
	for k, v in pairs(totalLocations) do
		if v.itemInfo.name == item.name and v.itemInfo.damage == item.damage then
			locations[#locations+1] = v
		end
	end
	
	return locations
end

-- Only called on the database server, takes a string for a database category (eg chests) and returns the data.
function handleDatabaseRequest(category)
	if category == "chests" then
		return getStorageArrangement()
	end
end

-- The main function for the database server
function databaseServer(printOutput)
	if not isDatabase() then
		return
	end
	
	local requester = nil
	local category = nil
	
	-- Main loop
	while true do	
		requester, category = rednet.receive("database")
		if printOutput then
			print("Serving database request from computer "..requester)
		end
		rednet.send(requester, handleDatabaseRequest(category), "dataRecieve")
	end
end