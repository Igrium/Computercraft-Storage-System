-- Main code run by central storage server. Send it a task with the storageRequest protocol.
os.loadAPI("config")
os.loadAPI("network")
os.loadAPI("inventory")
os.loadAPI("database")
os.loadAPI("turtleCommand")

-- Global variables
taskOrders = {}

-- Helper functions

-- Sends commands to turtle
function sendCommands(commands)
	rednet.send(config.turtleID, commands, "storageTurtle")
end

-- Command bundles

-- Collects all the ItemRequest objects 
function collect(commands, items)
	-- Filter out the items the storage system doesn't contain
	local itemsContained = {}
	for  k, v in pairs(items) do
		if #database.getItemLocations(v.item) > 0 then
			itemsContained[#itemsContained+1] = v
		end
	end
	
	-- Filter out the items that are out of stock
	local itemsStocked = {}
	for  k, v in pairs(itemsContained) do
		if #database.getFilledItemLocations(v.item, v.count) > 0 then
			itemsStocked[#itemsStocked+1] = v
		end
	end
	
	-- Build command stack
	for k, v in pairs(itemsStocked) do
		commands[#commands+1]  = turtleCommand.new("collectItem", v.item, v.count)
	end
	
	if #itemsContained < #items then
		return 2
	elseif #itemsStocked < #items then
		return 1
	else
		return 0
	end
end

function collectAndDump(commands, items, chest)
	local itemSuccess = collect(commands, items)
	commands[#commands+1] = turtleCommand.new("dumpItems", chest)
	return itemSuccess
end


-- Tasks

-- Collects all items and deposits them in the user chest or the farm deposit chest. Takes ItemRequest objects: {['item']=item, ['count'] = count}
function fetch(items, chest)
	-- Check formatting
	if items == nil then
		return 05
	end
	
	if chest == nil then
		chest = database.getStorageArrangement().userChest
	end
	
	-- If chest is still nil, there must have been a database error.
	if chest == nil then
		return 06
	end
	
	local commands = {}
	
	-- Build command stack
	collectAndDump(commands, items, chest)
	
	-- Send to turtle
	sendCommands(commands)
	local turtleSuccess = rednet.receive("storageTurtleResponse", 60)
	
	-- Return the right code
	if not turtleSuccess then
		return 3
	elseif itemSuccess ~= 0 then
		return itemSuccess
	else
		return 0
	end
end

function ship(items, destination)
	-- Check formatting
	if items == nil then
		return 05
	end
	
	local chest = database.getStorageArrangement().shipping
	print(chest)
	
	-- If chest is nil, there must have been a database error.
	if chest == nil then
		return 06
	end
	
	local commands = {}
	
	-- Build command stack
	commands[1] = turtleCommand.new("navigate", chest.coordinates)
	commands[2] = turtleCommand.new("redstoneOutput", "bottom", .25)
	
	local itemSuccess = collectAndDump(commands, items, chest)
	
	commands[#commands+1] = turtleCommand.new("redstoneOutput", "front", 1)
	
	-- Set shipping destination
	rednet.send(config.shippingServerID, destination, "shippingTrack")
	
	-- Send to turtle
	sendCommands(commands)
	local turtleSuccess = rednet.receive("storageTurtleResponse", 60)
	
	-- Return the right code
	if not turtleSuccess then
		return 3
	elseif itemSuccess ~= 0 then
		return itemSuccess
	else
		return 0
	end
end

-- Take items from a chest and sort them into the storage system
function sort(isShippment, chest)
	if chest == nil then
		print("Invalid chest")
		return 06
	end
	
	backupChest = database.getStorageArrangement()['backupChest']
	if backupChest == nil then
		print("Invalid backup chest")
		return 06
	end
	
	commands = {}
	
	commands[1] = turtleCommand.new("collectAll", chest)
	commands[2] = turtleCommand.new("sortAll", backupChest)
	commands[3] = turtleCommand.new("checkChest", chest)
	
	sendCommands(commands)
	
	-- Turtle will send info about whether the chest is still full. This also acts as our wait for the turtle to finish.
	local chestFull = select(2, rednet.receive("storageTurtleMessage", 120))
	if chestFull == nil then
		return 03
	end
	
	local errorCode = 0
	-- If the chest still has items, we need to run the task again.
	if chestFull then
		errorCode = sort(isShippment, chest)
	elseif isShippment then
		sendCommands({turtleCommand.new("redstoneOutput", "front", 1)})
	end
	
	return errorCode
end

-- Sort items from the user chest
function sortUser()
	return sort(false, database.getStorageArrangement()['userChest'])
end

function sortShipment()
	return sort(true, database.getStorageArrangement()['shipmentIntake'])
end

function parseTask(task, client)
	if task.name == "fetch" then
			rednet.send(client, fetch(unpack(task.args)), "storageResponse")
	elseif task.name == "ship" then
		rednet.send(client, ship(unpack(task.args)), "storageResponse")
	elseif task.name == "sortUser" then
		rednet.send(client, sortUser(), "storageResponse")
	elseif task.name == "sortShipment" then
		rednet.send(client, sortShipment(), "storageResponse")
	else
		rednet.send(client, 05, "storageResponse")
	end
end

-- Parses the first task in the queue
function parseTaskFromQueue()
	local success = parseTask(taskOrders[1].task, taskOrders[1].client)
	table.remove(taskOrders, 1)
end

-- Wait for task and add to then end of the queue
function getTask()
	local client
	local task
	client, task = rednet.receive("storageRequest")
	print("Recieved task "..task.name.." from computer "..client)
	return {['client']=client, ['task']=task}
end

-- Run in paralell with parseTask() to continue finding tasks while it is active. Never returns.
function getTasks()
	while true do
		taskOrders[#taskOrders+1] = getTask()
	end
end

function main()
	if os.getComputerID() ~= config.serverID then
		print("Computer is not the server in config. Can't run config code.")
		return
	end
	
	network.setupNetwork()
	
	while true do
		-- Make sure there is a task
		if #taskOrders == 0 then
			print("Waiting for task...")
			taskOrders[1] = getTask()
		end
		
		-- Execute task and look for others
		parallel.waitForAny(parseTaskFromQueue, getTasks)
	end
	
end

main()