-- Code that manages communication between the server and the turtle
os.loadAPI("database")
os.loadAPI("config")
os.loadAPI("navigation")
os.loadAPI("item")

os.loadAPI("network")

-- Navigate and face a direction. Takes a vector and a string
function navigate(destination, direction)
	navigation.navigate(destination.x, destination.y, destination.z)
	if direction ~= nil then
		navigation.faceDirection(direction)
	end
end

-- Place selected item in given chest, regardless of chest item type
function placeItem(chest, count)
	if navigation.navigate(chest.coordinates.x, chest.coordinates.y, chest.coordinates.z) then
		navigation.faceDirection(chest.direction)
		turtle.drop(count)
	end
end

-- Dumps all items in given chest, regardless of chest item type
function dumpItems(chest)
	if navigation.navigate(chest.coordinates.x, chest.coordinates.y, chest.coordinates.z) then
		navigation.faceDirection(chest.direction)
		item.dump()
		return true
	else
		return false
	end
end

-- Deposits all of item type into chest, regardless of chest item type
function depositAllOfType(itemInfo, chest)
	if navigation.navigate(chest.coordinates.x, chest.coordinates.y, chest.coordinates.z) then
		navigation.faceDirection(chest.direction)
		item.depositAllOfType(itemInfo)
	end
end

-- Deposits the item in the selected slot to it's appropriate chest. Boolean [all]: deposit all items of type into chest
function sort(all)
	if turtle.getItemDetail() == nil then
		print("No item in slot "..turtle.getSelectedSlot())
		return false
	end
	
	local itemInfo = turtle.getItemDetail()
	
	-- Deal with scenareo where all is nil
	if all == nil then
		all = false
	end
	
	-- Tally items
	local count = 0
	
	if all then
		count = item.tally(itemInfo)
	else
		count = turtle.getItemCount()
	end
	
	local chests = database.getAvailableItemLocations(itemInfo, count)
	
	if #chests == 0 or chests == nil then
		--Attempt to sort individually if there's not enough space for all, but if one of them fails, abort
		if all then
			for i=1,16,1 do
				if item.equals(turtle.getItemDetail(i), itemInfo) then
					turtle.select(i)
					if not sort(false) then
						print(itemInfo.name.." is not in the storage system or doesn't have enough space!")
						return false
					end
				end
			end
		end
			
		print(itemInfo.name.." is not in the storage system or doesn't have enough space!")
		return false
	end
	
	local chest = navigation.getClosestChest(chests)
	
	if all then
		depositAllOfType(itemInfo, chest)
	else
		placeItem(chest, turtle.getItemCount())
	end
	
	--Handle situation where not a full stack was dropped
	if all and item.tally(itemInfo) > 0 then
		item.selectItem(itemInfo)
		return sort(true)
	elseif (not all) and  turtle.getItemCount() > 0 then
		return sort(false)
	end
	
	return true
	
end

-- Sort all of the turtle's items into the storage system. [backupChest]: Chest to deposit unsorted items into
function sortAll(backupChest)
	-- Repeat for each 
	for i=1,16,1 do
		turtle.select(i)
		if turtle.getItemCount() > 0 then
			sort(true)
		end
	end
	-- Put remaining items in backupChest if nessicary
	if (backupChest ~= nil) and item.hasItems() then
		print(backupChest.coordinates)
		dumpItems(backupChest)
	end
	
end

-- Collect a number of items from a chest. Returns: success
function collect(chest, amount, slot)
	-- If there isn't enough space in the slot, divide into multiple slots
	if amount > 64  then
		local success = true
		for i=1,math.floor(amount/64),1 do
			if not collect(chest,64) then
				success = false
			end
		end
		-- Deal with remainder stack
		local remainder = math.fmod(amount, 64)
		
		-- Order of operations means collect isn't run if remainder = 0.
		if remainder > 0 and not collect(chest, remainder) then
			success = false
		end
		return success
	end

	-- Slot default
	if slot == nil then
		slot = item.getLowestOpenSlot()
	end

	if navigation.navigate(chest.coordinates.x,chest.coordinates.y,chest.coordinates.z) then
		navigation.faceDirection(chest.direction)
		turtle.select(slot)
		return turtle.suck(amount)
	else
		return false
	end
end

-- Collect a certian item
function collectItem(itemInfo, amount)
	local chests = database.getFilledItemLocations(itemInfo, amount)
	
	local originalAmount = item.tally(itemInfo)
	
	if #chests == 0 or chests == nil then
		print(itemInfo['name'].." is not in the storage system!")
		return false
	end
	
	collect(navigation.getClosestChest(chests), amount)
	print("test")
	--collect(chests[1], amount)
	
	-- Make sure we got the items
	local newAmount = item.tally(itemInfo)
	if math.abs(newAmount - originalAmount) < amount then
		return collectItem(itemInfo, math.abs(newAmount - originalAmount))
	else
		return true
	end
	
end

-- Collect as many items as possible from a chest
function collectALl(chest)
	navigate(chest.coordinates, chest.direction)
	for i=1,16,1 do
		turtle.select(i)
		turtle.suck()
	end
	
end
-- Outputs a pulse of redstone at a given side
function redstoneOutput(side, length)
	redstone.setOutput(side, true)
	os.sleep(length)
	redstone.setOutput(side, false)
end

-- Checks to see if there's items in a chest by navigating to it and attempting to suck
function checkChest(chest)
	-- Doesn't work if something's in slot 16
	if turtle.getItemCount(16) > 0 then
		return
	end
	
	local slot = turtle.getSelectedSlot()
	
	navigate(chest.coordinates, chest.direction)
	turtle.select(16)
	turtle.suck()
	
	local result = turtle.getItemCount() > 0
	
	turtle.drop()
	turtle.select(slot)
	return result
end
	
	

function main()
	network.setupNetwork()
	navigation.callibrate()
	--sortAll()
	
	sortAll(database.getStorageArrangement()['backupChest'])
end

--main()